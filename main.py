import logging
import os
from dotenv import load_dotenv
from UploadFileManager import UploadFileManager
from ShowFilemanager import ShowFileManager
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

WAITING_FOR_CODE = 1

async def start(update, context):
    user = update.effective_user
    
    if context.user_data.get("access_code"):
        access_code = context.user_data.get("access_code")
        context.user_data.clear()
        context.user_data["access_code"] = access_code
        
        text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}!
–Ø –±–æ—Ç CLOUDATA!
–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å
/help - –ø–æ–º–æ—â—å
/about - –æ –±–æ—Ç–µ
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
        await update.message.reply_text(text)
        return ConversationHandler.END
    else:
        context.user_data.clear()
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            f"–Ø –±–æ—Ç CLOUDATA!\n\n"
            f"üîê **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–¥ –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 20 –∑–Ω–∞–∫–æ–≤ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤**\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥:",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_FOR_CODE

async def process_code_input(update, context):
    user_input = update.message.text.strip()
    if len(user_input)>=20:
        context.user_data["access_code"] = user_input
        try:
            await update.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: {e}")
        
        await update.message.reply_text(
            f"**–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"
            f"–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/start - –Ω–∞—á–∞—Ç—å\n"
            f"/help - –ø–æ–º–æ—â—å\n"
            f"/about - –æ –±–æ—Ç–µ\n"
            f"/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "**–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!**\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **–Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤**\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown'
        )
        return WAITING_FOR_CODE

async def help_command(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
    if not context.user_data.get("access_code"):
        await update.message.reply_text(
            "**–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–¥**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    text = """
/start - –Ω–∞—á–∞—Ç—å
/help - –ø–æ–º–æ—â—å
/about - –æ –±–æ—Ç–µ
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    await update.message.reply_text(text)
    return ConversationHandler.END

async def about_command(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    if not context.user_data.get("access_code"):
        await update.message.reply_text(
            "**–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–¥**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    text = "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë"
    await update.message.reply_text(text)
    return ConversationHandler.END

async def menu_command(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    if not context.user_data.get("access_code"):
        await update.message.reply_text(
            "**–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–¥**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    access_code = context.user_data["access_code"]
    context.user_data.clear()
    context.user_data["access_code"] = access_code
    
    keyboard = [
        ['üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å',
        'üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 
        'üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup,
    )
    return ConversationHandler.END

async def cancel_command(update, context):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    if not context.user_data.get("access_code"):
        await update.message.reply_text(
            "**–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–¥**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    current_mode = context.user_data.get("curr")
    
    mode_messages = {
        "upload": "–∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
        "show": "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤",
    }
    
    if current_mode in mode_messages:
        message = f"–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ {mode_messages[current_mode]}"
        saved_code = context.user_data.get("access_code")
        context.user_data.clear()
        if saved_code:
            context.user_data["access_code"] = saved_code
        
        context.user_data.clear()
        if saved_code:
            context.user_data["access_code"] = saved_code
            
        await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
        
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())

async def handle_text_message(update, context):
    if not context.user_data.get("access_code"):
        await update.message.reply_text(
            "**–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–¥**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.",
            parse_mode='Markdown'
        )
        return
    
    text = update.message.text
    if text == 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞':
        await cancel_command(update, context)
        
    else:
        if len(text.strip())>=20 and not context.user_data.get("access_code"):
            await update.message.reply_text(
                "**–î–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start**",
                parse_mode='Markdown'
            )
        elif text in ["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å", "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"]:
            return
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ /menu")

async def cancel_code_input(update, context):
    await update.message.reply_text(
        "**–í–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.**\n\n"
        "–ë–µ–∑ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def setup_bot(token):
    application = Application.builder().token(token).build()
    
    start_conversation = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WAITING_FOR_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_code_input)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_code_input)]
    )
    
    application.add_handler(start_conversation)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    
    upload_manager = UploadFileManager(cancel_command, menu_command)
    show_manager = ShowFileManager(cancel_command)
    
    application.add_handler(upload_manager.get_conversation_handler())
    application.add_handler(show_manager.get_conversation_handler())
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    return application

def main():
    application = setup_bot(BOT_TOKEN)
    application.run_polling()

if __name__ == "__main__":
    main()