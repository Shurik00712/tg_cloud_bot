import logging
import os
from dotenv import load_dotenv
from UploadFileManager import UploadFileManager
from ShowFilemanager import ShowFileManager
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

async def start(update, context):
    user = update.effective_user
    context.user_data.clear()
    context.user_data["can_upload"] = False
    text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}!
–Ø –±–æ—Ç CLOUDATA!
–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å
/help - –ø–æ–º–æ—â—å
/about - –æ –±–æ—Ç–µ
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    await update.message.reply_text(text)
    return ConversationHandler.END

async def help_command(update, context):
    text = """
/start - –Ω–∞—á–∞—Ç—å
/help - –ø–æ–º–æ—â—å
/about - –æ –±–æ—Ç–µ
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    await update.message.reply_text(text)
    return ConversationHandler.END

async def about_command(update, context):
    text = "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë"
    await update.message.reply_text(text)
    return ConversationHandler.END

async def menu_command(update, context):
    context.user_data.clear()
    
    keyboard = [
        ['üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å',
        'üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 
        'üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup,
    )
    return ConversationHandler.END

async def cancel_command(update, context):
    current_mode = context.user_data.get("curr")
    print(current_mode)
    
    mode_messages = {
        "upload": "–∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
        "show": "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤",
        # –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
    
    if current_mode in mode_messages:
        message = f"–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ {mode_messages[current_mode]}"
        context.user_data.clear()
            
        await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
        
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
    
    return ConversationHandler.END

async def handle_text_message(update, context):
    text = update.message.text
    if text == 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å':
        return
    elif text == 'üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        return
    elif text == 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞':
        await cancel_command(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ /menu")

def setup_bot(token):
    application = Application.builder().token(token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about_command))
    
    upload_manager = UploadFileManager()
    show_manager = ShowFileManager()
    
    application.add_handler(upload_manager.get_conversation_handler(cancel_command, menu_command))
    application.add_handler(show_manager.get_conversation_handler(cancel_command))
    
    application.add_handler(CommandHandler("menu", menu_command))
    
    application.add_handler(CommandHandler("cancel", cancel_command))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    return application

def main():
    application = setup_bot(BOT_TOKEN)
    application.run_polling()

if __name__ == "__main__":
    main()