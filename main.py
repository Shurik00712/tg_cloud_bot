import logging
import os
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
async def start(update, context):
    user = update.effective_user
    context.user_data["can_upload"] = False
    text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}!
    –Ø –±–æ—Ç CLOUDATA!
    —Å–æ–∑–¥–∞—Ç–µ–ª—å SANYOK007
    –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
    /start - –Ω–∞—á–∞—Ç—å
    /help - –ø–æ–º–æ—â—å
    /about - –æ –±–æ—Ç–µ
    /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    await update.message.reply_text(text)
async def help_command(update, context):
    text = """
    /start - –Ω–∞—á–∞—Ç—å
    /help - –ø–æ–º–æ—â—å
    /about - –æ –±–æ—Ç–µ
    /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    await update.message.reply_text(text)
async def about_command(update, context):
    text = """
    –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–µ"""
    await update.message.reply_text(text)
async def menu_command(update, context):
    keyboard = [
        ['–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
async def handle_voice(update, context):
    voice = update.message.voice()
    file = await voice.get_file()
    
    await file.download_to_drive(f"data/voice/{file.file_id}.ogg")
    
    await update.message.reply_text(
        f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! "
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫"
    )
async def handle_photo(update, context):
    # –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö, –±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
    photo = update.message.photo[-1]
    file = await photo.get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await file.download_to_drive(f"data/photos/{file.file_id}.jpg")
    
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!")

async def handle_document(update, context):
    document = update.message.document
    file = await document.get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await file.download_to_drive(f"data/downloads/{document.file_name}")
    
    await update.message.reply_text(
        f"–§–∞–π–ª {document.file_name} –ø–æ–ª—É—á–µ–Ω! "
        f"–†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç"
    )
async def handle_video(update, context):
    video = update.message.video
    file = await video.get_file()
    
    await file.download_to_drive(f"data/videos/{video.file_name or file.file_id}.mp4")
    
    await update.message.reply_text("–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!")
    
    #async def handle_file()
async def handle_file(update, context):
    file_info = None
    file_obj = None
    filename = ""
    file_size = 0


    user = update.effective_user

    os.makedirs(f"users/{user.id}/audio", exist_ok=True)
    os.makedirs(f"users/{user.id}/documents", exist_ok=True)
    os.makedirs(f"users/{user.id}/other", exist_ok=True)
    os.makedirs(f"users/{user.id}/photos", exist_ok=True)
    os.makedirs(f"users/{user.id}/videos", exist_ok=True)
    os.makedirs(f"users/{user.id}/voice", exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
    # if update.message.text=='–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
    #     print("–ì—Ä—É–∑–∏")
    #     context.user_data['can_upload'] = True
    #     return
    
    if update.message.document:
        file_info = update.message.document
        file_obj = await file_info.get_file()
        filename = file_info.file_name or f"document_{file_info.file_id}"
        file_size = file_info.file_size
        
    elif update.message.photo:
        file_info = update.message.photo[-1]
        file_obj = await file_info.get_file()
        filename = f"photo_{file_info.file_id}.jpg"
        file_size = file_info.file_size
        
    elif update.message.video:
        file_info = update.message.video
        file_obj = await file_info.get_file()
        filename = file_info.file_name or f"video_{file_info.file_id}.mp4"
        file_size = file_info.file_size
        
    elif update.message.audio:
        file_info = update.message.audio
        file_obj = await file_info.get_file()
        filename = file_info.file_name or f"audio_{file_info.file_id}.mp3"
        file_size = file_info.file_size
        
    elif update.message.voice:
        file_info = update.message.voice
        file_obj = await file_info.get_file()
        filename = f"voice_{file_info.file_id}.ogg"
        file_size = file_info.file_size
        
    elif update.message.video_note:
        file_info = update.message.video_note
        file_obj = await file_info.get_file()
        filename = f"video_note_{file_info.file_id}.mp4"
        file_size = file_info.file_size
        
    elif update.message.sticker:
        file_info = update.message.sticker
        file_obj = await file_info.get_file()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
        if file_info.is_animated:
            extension = "tgs"
        elif file_info.is_video:
            extension = "webm"
        else:
            extension = "webp"
        filename = f"sticker_{file_info.file_id}.{extension}"
        file_size = file_info.file_size
        
    elif update.message.animation:
        file_info = update.message.animation
        file_obj = await file_info.get_file()
        filename = file_info.file_name or f"animation_{file_info.file_id}.mp4"
        file_size = file_info.file_size
    if not file_info or not file_obj:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª")
        return
    file_extension = os.path.splitext(filename)[1].lower() if '.' in filename else ''
    if file_extension in ['.txt', '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx']:
        folder = "documents"
    elif file_extension in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']:
        folder = "photos"
    elif file_extension in ['.mp4', '.avi', '.mov', '.mkv', '.webm']:
        folder = "videos"
    elif file_extension in ['.mp3', '.wav', '.ogg', '.flac']:
        folder = "videos"
    else:
        folder = "other"
        
        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    print("ok")
    save_path = f"users/{user.id}/{folder}/{filename}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await update.message.reply_text(f"üì• –°–∫–∞—á–∏–≤–∞—é {filename}...")
        await file_obj.download_to_drive(save_path)
        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫—É {folder}!\n"
            f"–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç"
        )
        context.user_data['can_upload'] = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
async def handle_message(update, context):
    text = update.message.text
    if text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        user = update.effective_user
        context.user_data['can_upload'] = True
        await update.message.reply_text(
        f"–ì—Ä—É–∑–∏, {user.first_name} "
    )
def setup_bot(token):
    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL | filters.PHOTO | filters.VOICE | filters.VIDEO, handle_file))
    # application.add_handler(MessageHandler(filters.TEXT, handle_message))
    # application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    # application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    # application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    # application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    return application 
def main():
    application = setup_bot(BOT_TOKEN)
    print("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    application.run_polling()
if __name__ == "__main__":
    main()